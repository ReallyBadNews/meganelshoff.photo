import { NextPage } from "next";
import Image from "../components/ds/Image";
// import Image from "next/future/image";
// import Image from "next/image";
import Head from "next/head";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const images = trpc.example.getCloudinaryImages.useQuery({
    folder: "weddings",
  });

  return (
    <>
      <Head>
        <title>T3 Supabase Hello World</title>
        <meta content="Generated by create-t3-app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-extrabold text-blue-10 dark:text-blue-dark-10 md:text-[5rem] lg:text-5xl">
          {`meganelshoff`}
          <span className="text-pink-111">.photo</span>
        </h1>
        {!images.isLoading ? (
          <div className="mt-8 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            {images.data?.resources.map((image) => {
              if (image.resource_type !== "image") {
                return null;
              }

              return (
                <Image
                  key={image.public_id}
                  src={image.public_id}
                  alt="TODO"
                  height={495}
                  width={744}
                  className="h-auto w-full rounded-lg shadow-lg"
                  loader={({ src, width, quality }) => {
                    return `https://res.cloudinary.com/ddibad3k7/image/upload/f_auto/w_${width},q_${
                      quality || 75
                    }/${src}`;
                  }}
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                  // placeholder="blur"
                />
              );
            })}
          </div>
        ) : (
          "loading images..."
        )}
      </main>
    </>
  );
};

export default Home;

// export const getServerSideProps = async () => {
//   const images = await getCloudinaryImages("samples");

//   return {
//     props: {
//       images: images ?? null,
//     },
//   };
// };

/**
 * If you want to statically render this page
 * - Export `appRouter` & `createContext` from [trpc].ts
 * - Make the `opts` object optional on `createContext()`
 *
 * @link https://trpc.io/docs/ssg
 */
// export const getStaticProps = async (
//   context: GetStaticPropsContext<{ filter: string }>,
// ) => {
//   const ssg = createSSGHelpers({
//     router: appRouter,
//     ctx: await createContext(),
//   });
//
//   await ssg.fetchQuery('post.all');
//
//   return {
//     props: {
//       trpcState: ssg.dehydrate(),
//       filter: context.params?.filter ?? 'all',
//     },
//     revalidate: 1,
//   };
// };
